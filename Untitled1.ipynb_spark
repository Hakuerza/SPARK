{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPzxxIgI3I8DWDHWoaPmiSa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":757},"id":"SUDz9STkk0fp","executionInfo":{"status":"ok","timestamp":1740511690631,"user_tz":-60,"elapsed":38227,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}},"outputId":"bc0171d6-6a15-46b3-bbe3-c78e893464d0"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[33m\r0% [Working]\u001b[0m\r            \rGet:1 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,632 B]\n","Get:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease [1,581 B]\n","Get:3 https://r2u.stat.illinois.edu/ubuntu jammy InRelease [6,555 B]\n","Get:4 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]\n","Hit:5 http://archive.ubuntu.com/ubuntu jammy InRelease\n","Get:6 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]\n","Hit:7 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n","Get:8 https://r2u.stat.illinois.edu/ubuntu jammy/main all Packages [8,699 kB]\n","Hit:9 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n","Get:10 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  Packages [1,318 kB]\n","Hit:11 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n","Get:12 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]\n","Get:13 https://r2u.stat.illinois.edu/ubuntu jammy/main amd64 Packages [2,660 kB]\n","Get:14 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [3,657 kB]\n","Get:15 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [3,799 kB]\n","Get:16 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [2,637 kB]\n","Get:17 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [1,235 kB]\n","Get:18 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [2,941 kB]\n","Get:19 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,528 kB]\n","Get:20 http://archive.ubuntu.com/ubuntu jammy-backports/universe amd64 Packages [35.2 kB]\n","Fetched 28.9 MB in 4s (7,292 kB/s)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","26 packages can be upgraded. Run 'apt list --upgradable' to see them.\n","\u001b[1;33mW: \u001b[0mSkipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\u001b[0m\n","tar: spark-3.2.1-bin-hadoop3.2.tgz: Cannot open: No such file or directory\n","tar: Error is not recoverable: exiting now\n","Requirement already satisfied: pyspark in /usr/local/lib/python3.11/dist-packages (3.5.4)\n","Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.11/dist-packages (from pyspark) (0.10.9.7)\n","Requirement already satisfied: py4j in /usr/local/lib/python3.11/dist-packages (0.10.9.7)\n"]},{"output_type":"execute_result","data":{"text/plain":["<pyspark.sql.session.SparkSession at 0x7e10293a4990>"],"text/html":["\n","            <div>\n","                <p><b>SparkSession - in-memory</b></p>\n","                \n","        <div>\n","            <p><b>SparkContext</b></p>\n","\n","            <p><a href=\"http://9f8af64243d4:4040\">Spark UI</a></p>\n","\n","            <dl>\n","              <dt>Version</dt>\n","                <dd><code>v3.5.4</code></dd>\n","              <dt>Master</dt>\n","                <dd><code>local[*]</code></dd>\n","              <dt>AppName</dt>\n","                <dd><code>Our First Spark Example</code></dd>\n","            </dl>\n","        </div>\n","        \n","            </div>\n","        "]},"metadata":{},"execution_count":1}],"source":["!sudo apt update\n","!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","#Check this site for the latest download link https://www.apache.org/dyn/closer.lua/spark/spark-3.2.1/spark-3.2.1-bin-hadoop3.2.tgz\n","!wget -q https://dlcdn.apache.org/spark/spark-3.2.1/spark-3.2.1-bin-hadoop3.2.tgz\n","!tar xf spark-3.2.1-bin-hadoop3.2.tgz\n","!pip install -q findspark\n","!pip install pyspark\n","!pip install py4j\n","\n","import os\n","import sys\n","# os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","# os.environ[\"SPARK_HOME\"] = \"/content/spark-3.2.1-bin-hadoop3.2\"\n","\n","\n","import findspark\n","findspark.init()\n","findspark.find()\n","\n","import pyspark\n","\n","from pyspark.sql import DataFrame, SparkSession\n","from typing import List\n","import pyspark.sql.types as T\n","import pyspark.sql.functions as F\n","\n","spark= SparkSession \\\n","       .builder \\\n","       .appName(\"Our First Spark Example\") \\\n","       .getOrCreate()\n","\n","spark"]},{"cell_type":"code","source":["spark"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":219},"id":"vjn7qygumG_u","executionInfo":{"status":"ok","timestamp":1740511934732,"user_tz":-60,"elapsed":18,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}},"outputId":"81ae65f3-0d68-4a22-ba96-235263141c68"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pyspark.sql.session.SparkSession at 0x7e10293a4990>"],"text/html":["\n","            <div>\n","                <p><b>SparkSession - in-memory</b></p>\n","                \n","        <div>\n","            <p><b>SparkContext</b></p>\n","\n","            <p><a href=\"http://9f8af64243d4:4040\">Spark UI</a></p>\n","\n","            <dl>\n","              <dt>Version</dt>\n","                <dd><code>v3.5.4</code></dd>\n","              <dt>Master</dt>\n","                <dd><code>local[*]</code></dd>\n","              <dt>AppName</dt>\n","                <dd><code>Our First Spark Example</code></dd>\n","            </dl>\n","        </div>\n","        \n","            </div>\n","        "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["from pyspark.sql import SparkSession"],"metadata":{"id":"fglxz6HtmY_C","executionInfo":{"status":"ok","timestamp":1740512008084,"user_tz":-60,"elapsed":41,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["sdf_coustomer = spark.read.csv(\"/content/customer_dataset.csv\", header=True)"],"metadata":{"id":"K4IHEHVDmghw","executionInfo":{"status":"ok","timestamp":1740512088394,"user_tz":-60,"elapsed":790,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["sdf_coustomer.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tX-oIn5-mvQj","executionInfo":{"status":"ok","timestamp":1740512122462,"user_tz":-60,"elapsed":814,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}},"outputId":"e5fa9919-d92b-429a-837c-2630d16d4a54"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["+----------+----+-------+------+------+----------+-----------------+------------+-----+\n","|CustomerID| Age| Income|Gender|Region|Occupation|PurchaseFrequency|Satisfaction|Churn|\n","+----------+----+-------+------+------+----------+-----------------+------------+-----+\n","|         1|39.0|39822.0|  Male| North|   Teacher|                5|         4.0|   No|\n","|         2|33.0|45417.0|Female|  West|  Engineer|                3|         5.0|   No|\n","|         3|41.0|41039.0|Female|  East|    Artist|                5|         4.0|  Yes|\n","|         4|50.0|51656.0|Female| South|     Other|                4|         3.0|  Yes|\n","|         5|32.0|67957.0|Female|  West|    Artist|                4|         1.0|   No|\n","|         6|32.0|38434.0|  Male| South|    Doctor|                0|         4.0|   No|\n","|         7|50.0|65012.0|  Male|  West|  Engineer|                2|         2.0|   No|\n","|         8|42.0|38274.0|Female|  West|     Other|                5|         4.0|  Yes|\n","|         9|30.0|37285.0|  Male| North|    Doctor|                1|         4.0|   No|\n","|        10|40.0|62278.0|  Male| North|  Engineer|                1|         2.0|   No|\n","|        11|30.0|63829.0|Female|  West|   Teacher|                3|         3.0|   No|\n","|        12|30.0|62771.0|  Male| South|    Doctor|                7|         1.0|   No|\n","|        13|37.0|30263.0|Female| North|     Other|                3|         5.0|   No|\n","|        14|18.0|43010.0|Female| South|  Engineer|                3|         3.0|   No|\n","|        15|18.0|62344.0|Female|  East|   Teacher|                4|         5.0|   No|\n","|        16|29.0|50623.0|Female|  West|    Doctor|                4|         5.0|   No|\n","|        17|24.0|33894.0|  Male|  West|    Artist|                1|         3.0|   No|\n","|        18|38.0|56874.0|  Male|  West|   Teacher|                3|         4.0|  Yes|\n","|        19|25.0|39277.0|  Male|  West|     Other|                4|         3.0|   No|\n","|        20|20.0|76917.0|Female| North|   Teacher|                5|         5.0|   No|\n","+----------+----+-------+------+------+----------+-----------------+------------+-----+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["from typing_extensions import OrderedDict\n","#¿Cuál es la distribución de la edad y los ingresos? ¿Se observan patrones o grupos específicos?\n","sdf_coustomer.createOrReplaceTempView(\"customer_dataset\")\n","spark.sql(\"SELECT age, income FROM customer_dataset\").show()\n","#creamos grupos `por edades\n","spark.sql(\"SELECT age, AVG(income) as avg_income FROM customer_dataset GROUP BY age\").show()\n","#ordenamos por edades mayor a menor\n","spark.sql(\"SELECT age, income FROM customer_dataset ORDER BY age DESC\").show()\n","\n","#¿Existen diferencias significativas en la frecuencia de compra entre géneros o regiones?\n","spark.sql(\"SELECT gender, COUNT(*) as frequency FROM customer_dataset GROUP BY gender\").show()\n","spark.sql(\"SELECT region, COUNT(*) as frequency FROM customer_dataset GROUP BY region\").show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"9QhxU1Dlm8Ub","executionInfo":{"status":"error","timestamp":1740512958381,"user_tz":-60,"elapsed":773,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}},"outputId":"fc4e9d63-c0e0-45be-c544-c3a93202998d"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["+----+-------+\n","| age| income|\n","+----+-------+\n","|39.0|39822.0|\n","|33.0|45417.0|\n","|41.0|41039.0|\n","|50.0|51656.0|\n","|32.0|67957.0|\n","|32.0|38434.0|\n","|50.0|65012.0|\n","|42.0|38274.0|\n","|30.0|37285.0|\n","|40.0|62278.0|\n","|30.0|63829.0|\n","|30.0|62771.0|\n","|37.0|30263.0|\n","|18.0|43010.0|\n","|18.0|62344.0|\n","|29.0|50623.0|\n","|24.0|33894.0|\n","|38.0|56874.0|\n","|25.0|39277.0|\n","|20.0|76917.0|\n","+----+-------+\n","only showing top 20 rows\n","\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:root:KeyboardInterrupt while sending command.\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/py4j/java_gateway.py\", line 1038, in send_command\n","    response = connection.send_command(command)\n","               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/py4j/clientserver.py\", line 511, in send_command\n","    answer = smart_decode(self.stream.readline()[:-1])\n","                          ^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/socket.py\", line 718, in readinto\n","    return self._sock.recv_into(b)\n","           ^^^^^^^^^^^^^^^^^^^^^^^\n","KeyboardInterrupt\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-e564ec9504de>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mspark\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"SELECT age, income FROM customer_dataset\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#creamos grupos y creamos la media por edad y ingresos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mspark\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"SELECT age, AVG(income) as avg_income FROM customer_dataset GROUP BY age\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;31m#ordenamos por edades mayor a menor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mspark\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"SELECT age, income FROM customer_dataset ORDER BY age DESC\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(self, n, truncate, vertical)\u001b[0m\n\u001b[1;32m    945\u001b[0m         \u001b[0mname\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mBob\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m         \"\"\"\n\u001b[0;32m--> 947\u001b[0;31m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_show_string\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtruncate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvertical\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m     def _show_string(\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36m_show_string\u001b[0;34m(self, n, truncate, vertical)\u001b[0m\n\u001b[1;32m    963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    964\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtruncate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mtruncate\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 965\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshowString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvertical\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    966\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    967\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1319\u001b[0m             \u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEND_COMMAND_PART\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1321\u001b[0;31m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1322\u001b[0m         return_value = get_return_value(\n\u001b[1;32m   1323\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command, retry, binary)\u001b[0m\n\u001b[1;32m   1036\u001b[0m         \u001b[0mconnection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1037\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1038\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconnection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1039\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1040\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_connection_guard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/py4j/clientserver.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command)\u001b[0m\n\u001b[1;32m    509\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    510\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 511\u001b[0;31m                 \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msmart_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    512\u001b[0m                 \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Answer received: {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    513\u001b[0m                 \u001b[0;31m# Happens when a the other end is dead. There might be an empty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    716\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    717\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 718\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    719\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    720\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["df = sdf_coustomer.withColumn(\n","    \"AgeGroup\",\n","    F.when(F.col(\"Age\") < 25, \"18-24\") # Usamos F.when y F.col\n","    .when((F.col(\"Age\") >= 25) & (F.col(\"Age\") < 35), \"25-34\") # Usamos F.when y F.col\n","    .when((F.col(\"Age\") >= 35) & (F.col(\"Age\") < 45), \"35-44\") # Usamos F.when y F.col\n","    .when((F.col(\"Age\") >= 45) & (F.col(\"Age\") < 55), \"45-54\") # Usamos F.when y F.col\n","    .otherwise(\"55+\") # Usamos F.when y F.col\n",")"],"metadata":{"id":"tcf5_TuMra9M","executionInfo":{"status":"ok","timestamp":1740513328238,"user_tz":-60,"elapsed":97,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["df.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uwo8XtKirdxm","executionInfo":{"status":"ok","timestamp":1740513352614,"user_tz":-60,"elapsed":262,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}},"outputId":"d5e15ed6-8755-40e7-9f11-a3828b851cac"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["+----------+----+-------+------+------+----------+-----------------+------------+-----+--------+\n","|CustomerID| Age| Income|Gender|Region|Occupation|PurchaseFrequency|Satisfaction|Churn|AgeGroup|\n","+----------+----+-------+------+------+----------+-----------------+------------+-----+--------+\n","|         1|39.0|39822.0|  Male| North|   Teacher|                5|         4.0|   No|   35-44|\n","|         2|33.0|45417.0|Female|  West|  Engineer|                3|         5.0|   No|   25-34|\n","|         3|41.0|41039.0|Female|  East|    Artist|                5|         4.0|  Yes|   35-44|\n","|         4|50.0|51656.0|Female| South|     Other|                4|         3.0|  Yes|   45-54|\n","|         5|32.0|67957.0|Female|  West|    Artist|                4|         1.0|   No|   25-34|\n","|         6|32.0|38434.0|  Male| South|    Doctor|                0|         4.0|   No|   25-34|\n","|         7|50.0|65012.0|  Male|  West|  Engineer|                2|         2.0|   No|   45-54|\n","|         8|42.0|38274.0|Female|  West|     Other|                5|         4.0|  Yes|   35-44|\n","|         9|30.0|37285.0|  Male| North|    Doctor|                1|         4.0|   No|   25-34|\n","|        10|40.0|62278.0|  Male| North|  Engineer|                1|         2.0|   No|   35-44|\n","|        11|30.0|63829.0|Female|  West|   Teacher|                3|         3.0|   No|   25-34|\n","|        12|30.0|62771.0|  Male| South|    Doctor|                7|         1.0|   No|   25-34|\n","|        13|37.0|30263.0|Female| North|     Other|                3|         5.0|   No|   35-44|\n","|        14|18.0|43010.0|Female| South|  Engineer|                3|         3.0|   No|   18-24|\n","|        15|18.0|62344.0|Female|  East|   Teacher|                4|         5.0|   No|   18-24|\n","|        16|29.0|50623.0|Female|  West|    Doctor|                4|         5.0|   No|   25-34|\n","|        17|24.0|33894.0|  Male|  West|    Artist|                1|         3.0|   No|   18-24|\n","|        18|38.0|56874.0|  Male|  West|   Teacher|                3|         4.0|  Yes|   35-44|\n","|        19|25.0|39277.0|  Male|  West|     Other|                4|         3.0|   No|   25-34|\n","|        20|20.0|76917.0|Female| North|   Teacher|                5|         5.0|   No|   18-24|\n","+----------+----+-------+------+------+----------+-----------------+------------+-----+--------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["df_agrupado = df.groupBy(\"AgeGroup\").agg(F.avg(\"Income\").alias(\"avg_income\"))"],"metadata":{"id":"y_XmFUPPrpNw","executionInfo":{"status":"ok","timestamp":1740513404546,"user_tz":-60,"elapsed":41,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["df_agrupado.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kkDqkK6MrvNj","executionInfo":{"status":"ok","timestamp":1740513423364,"user_tz":-60,"elapsed":832,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}},"outputId":"6cea04d2-9369-4236-befd-2f81780cb337"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["+--------+------------------+\n","|AgeGroup|        avg_income|\n","+--------+------------------+\n","|   45-54| 50494.41573033708|\n","|   35-44|50063.790201382624|\n","|   25-34| 50584.49895615866|\n","|   18-24|50330.248551191245|\n","|     55+| 50742.67168674699|\n","+--------+------------------+\n","\n"]}]},{"cell_type":"code","source":["#¿Qué ocupaciones tienden a tener una mayor satisfacción promedio?\n","spark.sql(\"SELECT occupation, AVG(satisfaction) as avg_satisfaction FROM customer_dataset GROUP BY occupation ORDER BY avg_satisfaction DESC\").show()\n","# ¿que características tienen los clientes que abandonaron el servicio (churn = \"Yes\")?\n","spark.sql(\"SELECT * FROM customer_dataset WHERE churn = 'Yes'\").show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MJgbJKIOoe_N","executionInfo":{"status":"ok","timestamp":1740512634931,"user_tz":-60,"elapsed":839,"user":{"displayName":"Lucia Fernandez","userId":"16076798919598370983"}},"outputId":"81904a3b-d1cc-404c-e059-f1f698adb4e7"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["+----------+------------------+\n","|occupation|  avg_satisfaction|\n","+----------+------------------+\n","|  Engineer|3.0131313131313133|\n","|   Teacher| 3.005804311774461|\n","|     Other| 2.986158001350439|\n","|    Doctor|  2.98078197481776|\n","|    Artist|2.9209257473481194|\n","+----------+------------------+\n","\n","+----------+----+-------+------+------+----------+-----------------+------------+-----+\n","|CustomerID| Age| Income|Gender|Region|Occupation|PurchaseFrequency|Satisfaction|Churn|\n","+----------+----+-------+------+------+----------+-----------------+------------+-----+\n","|         3|41.0|41039.0|Female|  East|    Artist|                5|         4.0|  Yes|\n","|         4|50.0|51656.0|Female| South|     Other|                4|         3.0|  Yes|\n","|         8|42.0|38274.0|Female|  West|     Other|                5|         4.0|  Yes|\n","|        18|38.0|56874.0|  Male|  West|   Teacher|                3|         4.0|  Yes|\n","|        39|21.0|59278.0|Female| South|     Other|                2|         5.0|  Yes|\n","|        47|30.0|56762.0|Female|  West|  Engineer|                5|         2.0|  Yes|\n","|        49|38.0|56863.0|Female|  East|  Engineer|                5|         4.0|  Yes|\n","|        57|26.0|46661.0|  Male|  West|    Doctor|                8|         2.0|  Yes|\n","|        62|33.0|53577.0|  Male|  West|    Doctor|                0|         1.0|  Yes|\n","|        64|23.0|76725.0|  Male|  East|     Other|                1|         2.0|  Yes|\n","|        67|34.0|45854.0|  Male|  West|     Other|                3|        NULL|  Yes|\n","|        70|28.0|44711.0|  Male| North|     Other|                2|         1.0|  Yes|\n","|        73|34.0|64817.0|Female|  East|  Engineer|                2|         2.0|  Yes|\n","|        86|29.0|52635.0|Female| South|    Artist|                4|         3.0|  Yes|\n","|        88|38.0|29273.0|  Male| South|    Doctor|                4|         5.0|  Yes|\n","|        92|44.0|32914.0|Female|  East|     Other|                5|         5.0|  Yes|\n","|        94|31.0|35288.0|Female| North|    Doctor|                3|         2.0|  Yes|\n","|        96|20.0|73986.0|Female| South|    Artist|                4|         2.0|  Yes|\n","|       109|37.0|   NULL|  Male|  East|  Engineer|                3|         1.0|  Yes|\n","|       115|33.0|45781.0|  Male|  West|    Artist|                2|         4.0|  Yes|\n","+----------+----+-------+------+------+----------+-----------------+------------+-----+\n","only showing top 20 rows\n","\n"]}]}]}